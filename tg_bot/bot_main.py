import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
import asyncio

load_dotenv()
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

user_languages = {}

translations = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç!\nü§ñ –Ø –±–æ—Ç Latoken –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ –æ—Ç –ö–æ—Ä–æ–±–∫–æ –ú–∞–∫—Å–∏–º–∞.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:",
        "about_latoken": "üè¢ –û –õ–∞—Ç–æ–∫–µ–Ω",
        "about_hackathon": "üíª –û —Ö–∞–∫–∞—Ç–æ–Ω–µ",
        "refresh_buttons": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏",
        "change_language": "üåê –Ø–∑—ã–∫",
        "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "latoken_info": "Latoken ‚Äî –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –æ–±—É—á–µ–Ω–∏—è.\n–°—Å—ã–ª–∫–∞: https://coda.io/@latoken/latoken-talent/latoken-161",
        "hackathon_info": "–•–∞–∫–∞—Ç–æ–Ω ‚Äî —à–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É Latoken.\n–°—Å—ã–ª–∫–∞: https://deliver.latoken.com/hackathon",
        "unknown": "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞!",
        "buttons_updated": "–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        "russian_lang": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "english_lang": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "keywords": {
            "latoken": ["–ª–∞—Ç–æ–∫–µ–Ω", "–∫–æ–º–ø–∞–Ω–∏", "compan", "latoken"],
            "hackathon": ["—Ö–∞–∫–∞—Ç–æ–Ω", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏", "—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏", "hackathon", "hackaton", "event", "competition"]
        }
    },
    "en": {
        "welcome": "Hello!\nü§ñ I am bot Latoken for hackathon from Korobko Maksim.\nChoose what you want to know:",
        "about_latoken": "üè¢ About Latoken",
        "about_hackathon": "üíª About Hackathon",
        "refresh_buttons": "üîÑ Refresh Buttons",
        "change_language": "üåê Language",
        "choose_language": "Choose language:",
        "latoken_info": "Latoken - crypto platform for trading and education.\nLink: https://coda.io/@latoken/latoken-talent/latoken-161",
        "hackathon_info": "Hackathon - chance to join Latoken team.\nLink: https://deliver.latoken.com/hackathon",
        "unknown": "Please use the buttons!",
        "buttons_updated": "Buttons updated!",
        "russian_lang": "üá∑üá∫ Russian",
        "english_lang": "üá¨üáß English",
        "keywords": {
            "latoken": ["–ª–∞—Ç–æ–∫–µ–Ω", "–∫–æ–º–ø–∞–Ω–∏", "compan", "latoken"],
            "hackathon": ["—Ö–∞–∫–∞—Ç–æ–Ω", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏", "—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏", "hackathon", "hackaton", "event", "competition"]
        }
    }
}

def find_matching_intent(user_id: int, text: str) -> str:
    lang = user_languages.get(user_id, 'ru')
    text = text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ª–∞—Ç–æ–∫–µ–Ω
    if any(keyword in text for keyword in translations[lang]["keywords"]["latoken"]):
        return "latoken_info"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞
    if any(keyword in text for keyword in translations[lang]["keywords"]["hackathon"]):
        return "hackathon_info"

    return None

def get_translation(user_id: int, key: str) -> str:
    lang = user_languages.get(user_id, 'ru')
    return translations[lang].get(key, key)


async def build_main_keyboard(user_id: int):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text=get_translation(user_id, "about_latoken")),
        types.KeyboardButton(text=get_translation(user_id, "about_hackathon"))
    )
    builder.row(
        types.KeyboardButton(text=get_translation(user_id, "refresh_buttons")),
        types.KeyboardButton(text=get_translation(user_id, "change_language"))
    )
    return builder.as_markup(resize_keyboard=True)


@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_languages.setdefault(user_id, 'ru')
    await message.answer(
        get_translation(user_id, "welcome"),
        reply_markup=await build_main_keyboard(user_id)
    )


@dp.message(F.text.in_([t["refresh_buttons"] for t in translations.values()]))
async def refresh_buttons(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        get_translation(user_id, "buttons_updated"),
        reply_markup=await build_main_keyboard(user_id)
    )


@dp.message(F.text.in_([t["change_language"] for t in translations.values()]))
async def change_language(message: types.Message):
    user_id = message.from_user.id
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text=get_translation(user_id, "russian_lang")),
        types.KeyboardButton(text=get_translation(user_id, "english_lang"))
    )
    await message.answer(
        get_translation(user_id, "choose_language"),
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(F.text.in_([t["russian_lang"] for t in translations.values()]))
async def set_russian(message: types.Message):
    user_id = message.from_user.id
    user_languages[user_id] = 'ru'
    await message.answer("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π ‚úÖ")
    await cmd_start(message)


@dp.message(F.text.in_([t["english_lang"] for t in translations.values()]))
async def set_english(message: types.Message):
    user_id = message.from_user.id
    user_languages[user_id] = 'en'
    await message.answer("Language changed to English ‚úÖ")
    await cmd_start(message)


@dp.message()
async def handle_buttons(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text == get_translation(user_id, "about_latoken"):
        await message.answer(get_translation(user_id, "latoken_info"))
    elif text == get_translation(user_id, "about_hackathon"):
        await message.answer(get_translation(user_id, "hackathon_info"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    else:
        intent = find_matching_intent(user_id, text)
        if intent:
            await message.answer(get_translation(user_id, intent))
        else:
            await message.answer(get_translation(user_id, "unknown"))


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())