import sys
import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
import asyncio
from openai import OpenAI

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.database import db
from src.culture_deck_scraper import CultureDeckScraper
from src.ai_integration import OpenAIIntegration

load_dotenv()
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

scraper = CultureDeckScraper()

# ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ —Ñ–∞–π–ª–∞ (–∑–∞–ø–æ–ª–Ω—è—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
ASSISTANT_ID = os.getenv("ASSISTANT_ID") or None
FILE_ID = os.getenv("FILE_ID") or None

translations = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç!\nü§ñ –Ø –±–æ—Ç Latoken –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ –æ—Ç –ö–æ—Ä–æ–±–∫–æ –ú–∞–∫—Å–∏–º–∞.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:",
        "about_latoken": "üè¢ –û –õ–∞—Ç–æ–∫–µ–Ω",
        "about_hackathon": "üíª –û –•–∞–∫–∞—Ç–æ–Ω–µ",
        "about_culture_deck": "üë• –û –ö–æ—Ä–ø–æ—Ä–æ—Ç–∏–≤–Ω–æ–π –ö—É–ª—å—Ç—É—Ä–µ",
        "refresh_buttons": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏",
        "change_language": "üåê –Ø–∑—ã–∫",
        "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "latoken_info": "Latoken ‚Äî –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –æ–±—É—á–µ–Ω–∏—è.\n–°—Å—ã–ª–∫–∞: https://coda.io/@latoken/latoken-talent/latoken-161",
        "hackathon_info": "–•–∞–∫–∞—Ç–æ–Ω ‚Äî —à–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É Latoken.\n–°—Å—ã–ª–∫–∞: https://deliver.latoken.com/hackathon",
        "unknown": "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞!",
        "buttons_updated": "–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        "russian_lang": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "english_lang": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "question_ask": "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å?",
        "know_more": "üîç –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
        "button_back": "üîô –ù–∞–∑–∞–¥",
        "culture_deck_summary": "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–æ—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã: ",
        "link_word": "–°—Å—ã–ª–∫–∞: ",
        "keywords": {
            "latoken": ["–ª–∞—Ç–æ–∫–µ–Ω", "–∫–æ–º–ø–∞–Ω–∏", "compan", "latoken"],
            "hackathon": ["—Ö–∞–∫–∞—Ç–æ–Ω", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏", "—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏", "hackathon", "hackaton", "event", "competition"]
        }
    },
    "en": {
        "welcome": "Hello!\nü§ñ I am bot Latoken for hackathon from Korobko Maksim.\nChoose what you want to know:",
        "about_latoken": "üè¢ About Latoken",
        "about_hackathon": "üíª About Hackathon",
        "about_culture_deck": "üë• About Corporate Culture",
        "refresh_buttons": "üîÑ Refresh Buttons",
        "change_language": "üåê Language",
        "choose_language": "Choose language:",
        "latoken_info": "Latoken - crypto platform for trading and education.\nLink: https://coda.io/@latoken/latoken-talent/latoken-161",
        "hackathon_info": "Hackathon - chance to join Latoken team.\nLink: https://deliver.latoken.com/hackathon",
        "unknown": "Please use the buttons!",
        "buttons_updated": "Buttons updated!",
        "russian_lang": "üá∑üá∫ Russian",
        "english_lang": "üá¨üáß English",
        "question_ask": "What you want to ask?",
        "know_more": "üîç Know more",
        "button_back": "üîô back",
        "culture_deck_summary": "Quick summary for culture deck: ",
        "link_word": "Link: ",
        "keywords": {
            "latoken": ["–ª–∞—Ç–æ–∫–µ–Ω", "–∫–æ–º–ø–∞–Ω–∏", "compan", "latoken"],
            "hackathon": ["—Ö–∞–∫–∞—Ç–æ–Ω", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏", "—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏", "hackathon", "hackaton", "event", "competition"]
        }
    }
}

async def get_culture_deck_data():
    data = await db.get_culture_deck()
    if not data:
        data = scraper.get_content("https://coda.io/@latoken/latoken-talent/culture-139")
        await db.save_culture_deck(data)
    return data

async def find_matching_intent(user_id: int, text: str) -> str:
    lang = await db.get_user_language(user_id)
    text = text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ª–∞—Ç–æ–∫–µ–Ω
    if any(keyword in text for keyword in translations[lang]["keywords"]["latoken"]):
        return "latoken_info"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞
    if any(keyword in text for keyword in translations[lang]["keywords"]["hackathon"]):
        return "hackathon_info"

    return None

async def get_translation(user_id: int, key: str) -> str:
    lang = await db.get_user_language(user_id)
    return translations[lang].get(key, key)


async def build_main_keyboard(user_id: int):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text=await get_translation(user_id, "about_latoken")),
        types.KeyboardButton(text=await get_translation(user_id, "about_hackathon"))
    )
    builder.row(
        types.KeyboardButton(text=await get_translation(user_id, "about_culture_deck"))
    )
    builder.row(
        types.KeyboardButton(text=await get_translation(user_id, "refresh_buttons")),
        types.KeyboardButton(text=await get_translation(user_id, "change_language"))
    )
    await db.set_user_state(user_id, 'base')
    return builder.as_markup(resize_keyboard=True)


@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        await get_translation(user_id, "welcome"),
        reply_markup=await build_main_keyboard(user_id)
    )


async def get_culture_deck_summary(user_id: int):
    lang = await db.get_user_language(user_id)
    data = await db.get_culture_deck(lang)
    return {
        "summary": data["summary"],
        "link": data["link"]
    }

@dp.message(F.text.in_([t["about_culture_deck"] for t in translations.values()]))
async def culture_deck_info(message: types.Message):
    user_id = message.from_user.id
    keyboard = ReplyKeyboardBuilder()
    keyboard.row(
        types.KeyboardButton(text=await get_translation(user_id, "know_more")),
        types.KeyboardButton(text=await get_translation(user_id, "button_back"))
    )
    await db.set_user_state(user_id, 'culture_deck')

    await message.answer(
        await get_translation(user_id,"question_ask"),
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )


@dp.message(F.text.in_([t["know_more"] for t in translations.values()]))
async def know_more(message: types.Message):
    user_id = message.from_user.id
    data = await get_culture_deck_summary(user_id)
    await message.answer(
        await get_translation(user_id, "culture_deck_summary")
        + data["summary"]
        + "\n" + await get_translation(user_id, "link_word")
        + data["link"]
    )


@dp.message(F.text.in_([t["button_back"] for t in translations.values()]))
async def back_to_main(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        await get_translation(user_id, "welcome"),
        reply_markup=await build_main_keyboard(user_id)
    )


@dp.message(F.text.in_([t["refresh_buttons"] for t in translations.values()]))
async def refresh_buttons(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        await get_translation(user_id, "buttons_updated"),
        reply_markup=await build_main_keyboard(user_id)
    )


@dp.message(F.text.in_([t["change_language"] for t in translations.values()]))
async def change_language(message: types.Message):
    user_id = message.from_user.id
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text=await get_translation(user_id, "russian_lang")),
        types.KeyboardButton(text=await get_translation(user_id, "english_lang"))
    )
    await message.answer(
        await get_translation(user_id, "choose_language"),
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(F.text.in_([t["russian_lang"] for t in translations.values()]))
async def set_russian(message: types.Message):
    user_id = message.from_user.id
    await db.set_user_language(user_id, 'ru')
    await message.answer("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π ‚úÖ")
    await cmd_start(message)


@dp.message(F.text.in_([t["english_lang"] for t in translations.values()]))
async def set_english(message: types.Message):
    user_id = message.from_user.id
    await db.set_user_language(user_id, 'en')
    await message.answer("Language changed to English ‚úÖ")
    await cmd_start(message)


async def handle_buttons(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text == await get_translation(user_id, "about_latoken"):
        await message.answer(await get_translation(user_id, "latoken_info"))
    elif text == await get_translation(user_id, "about_hackathon"):
        await message.answer(await get_translation(user_id, "hackathon_info"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    else:
        intent = await find_matching_intent(user_id, text)
        if intent:
            await message.answer(await get_translation(user_id, intent))
        else:
            await message.answer(await get_translation(user_id, "unknown"))

@dp.message()
async def handle_culture_deck_questions(message: types.Message):
    user_id = message.from_user.id
    user_state = await db.get_user_state(user_id)

    if user_state == "culture_deck":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ Culture Deck ‚Äî –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤–æ–ø—Ä–æ—Å OpenAI
        lang = await db.get_user_language(user_id)
        data = await db.get_culture_deck(lang)

        response = await openai_client.ask_about_culture_deck(message.text, data["main_content"], data["additional_contents"])
        await message.answer(response)
    else:
        await handle_buttons(message)


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    try:
        await db.connect()
        logging.info("Database connected successfully")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
        openai_client = OpenAIIntegration(os.getenv("OPENAI_KEY"))
        logging.info("Openai client created successfully")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–π Culture Deck
        culture_data_ru = await db.get_culture_deck("ru")
        if not culture_data_ru or culture_data_ru["summary"] is None or culture_data_ru["summary"] == '':
            print("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç summary_ru, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º...")
            raw_data = scraper.get_content("https://coda.io/@latoken/latoken-talent/culture-139")
            summary = await openai_client.generate_summaries(raw_data["main_content"], "ru")
            await db.update_culture_summary("ru", summary)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π Culture Deck
        culture_data_en = await db.get_culture_deck("en")
        if not culture_data_en or culture_data_en["summary"] is None or culture_data_en["summary"] == '':
            print("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç summary_en, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º...")
            raw_data = scraper.get_content("https://coda.io/@latoken/latoken-talent/culture-139")
            summary= await openai_client.generate_summaries(raw_data["main_content"], "en")
            await db.update_culture_summary("en", summary)
        logging.info("Culture Deck summary is up to date.")
    except Exception as e:
        logging.error(f"Database connection error: {e}")
        return

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await db.close()
        logging.info("Database connection closed")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())